#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
    xorq %rax,%rax		    # count = 0;
	iaddq $-6, %rdx		    # len >= loop unroll?
    jl Finish		        # if not, goto Finish

Loop:
    mrmovq (%rdi), %r10	    # read val from src...
    rrmovq %rax, %r9		# copy count in r9
    iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, (%rsi)	    # ...and store val to dst

    mrmovq 8(%rdi), %r10	# read val from src...
    rrmovq %rax, %r9		# copy count in r9
    iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 8(%rsi)	# ...and store val to dst

    mrmovq 16(%rdi), %r10	# read val from src...
    rrmovq %rax, %r9		# copy count in r9
    iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 16(%rsi)	# ...and store val to dst

    mrmovq 24(%rdi), %r10	# read val from src...
    rrmovq %rax, %r9		# copy count in r9
    iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 24(%rsi)	# ...and store val to dst

    mrmovq 32(%rdi), %r10	# read val from src...
    rrmovq %rax, %r9		# copy count in r9
    iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 32(%rsi)	# ...and store val to dst

    mrmovq 40(%rdi), %r10	# read val from src...
    rrmovq %rax, %r9		# copy count in r9
    iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 40(%rsi)	# ...and store val to dst

	iaddq $48, %rdi		    # src++
	iaddq $48, %rsi		    # dst++
    iaddq $-6, %rdx		    # len >= loop unroll?
	jge Loop			    # if so, goto Loop:

Finish:
    iaddq $6, %rdx		    # restore len
    addq %rdx, %rdx		    # compute jump destination
    mrmovq Jump_table(%rdx),%rdx
    irmovq 0xffff, %r11
    andq %r11, %rdx
    pushq %rdx
    ret                     # jump !

Len0:
    ret
Len1:
    mrmovq (%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, (%rsi)	    # ...and store val to dst
    ret
Len2:
    mrmovq (%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, (%rsi)	    # ...and store val to dst

    mrmovq 8(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 8(%rsi)	    # ...and store val to dst
    ret
Len3:
    mrmovq (%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, (%rsi)	    # ...and store val to dst

    mrmovq 8(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 8(%rsi)	    # ...and store val to dst

    mrmovq 16(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 16(%rsi)	    # ...and store val to dst
    ret
Len4:
    mrmovq (%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, (%rsi)	    # ...and store val to dst

    mrmovq 8(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 8(%rsi)	    # ...and store val to dst

    mrmovq 16(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 16(%rsi)	    # ...and store val to dst

    mrmovq 24(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 24(%rsi)	    # ...and store val to dst
    ret
Len5:
    mrmovq (%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, (%rsi)	    # ...and store val to dst

    mrmovq 8(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 8(%rsi)	    # ...and store val to dst

    mrmovq 16(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 16(%rsi)	    # ...and store val to dst

    mrmovq 24(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 24(%rsi)	    # ...and store val to dst

    mrmovq 32(%rdi), %r10	    # read val from src...
	rrmovq %rax, %r9		# copy count in r9
	iaddq $1, %r9      		# r9++ (as if val is pos)
	andq %r10, %r10		    # val pos?
	cmovg %r9, %rax			# if so update count
	rmmovq %r10, 32(%rsi)	    # ...and store val to dst
    ret

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
    .align 8
Jump_table:
    .word Len0
    .word Len1
    .word Len2
    .word Len3
    .word Len4
    .word Len5
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
